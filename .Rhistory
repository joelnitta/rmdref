library(usethis)
use_mit_license()
library(devtools)
check()
usethis::edit_r_profile(scope = "project")
check()
use_pipe()
use_package(c("readr", "stringr", "tibble"))
use_package("readr")
use_package("stringr")
use_package("tibble")
library(rmarkdown)
?rmarkdown::render()
tempfile <- tempfile()
tempfile
tempfile <- tempfile(ext = ".Rmd")
?tempfile
tempfile <- tempfile(fileext = ".Rmd")
tempfile
lines <- c(
"---",
"title: 'Report'",
"output_format: html_document",
"---",
"This statement is supported by @Nitta2021",
"[@Foo1983; @Blah2001; but see @Smith 2020]."
)
write(lines, tempfile)
extract_citations <- function(rmd_file) {
readr::read_lines(rmd_file) %>%
stringr::str_split(" |;") %>%
unlist %>%
magrittr::extract(., stringr::str_detect(., "@")) %>%
stringr::str_remove_all("^[^@]*") %>%
stringr::str_remove_all('\\[|\\]|\\)|\\(|\\.$|,|\\{|\\}|\\\\|\\"') %>%
magrittr::extract(., stringr::str_detect(., "^@|^-@")) %>%
stringr::str_remove_all("^@|^-@") %>%
unique %>%
sort %>%
tibble::tibble(key = .)
}
extract_citations(tempfile)
library(magrittr)
extract_citations(tempfile)
load_all()
tempfile <- tempfile(fileext = ".Rmd")
lines <- c(
"---",
"title: 'Report'",
"output_format: html_document",
"---",
"This statement is supported by @Nitta2021",
"[@Foo1983; @Blah2001; but see @Smith2020]."
)
write(lines, tempfile)
extract_citations(tempfile)
file.remove(tempfile)
load_all()
?`%>%`
usethis::use_pipe()
load_all()
tempfile <- tempfile(fileext = ".Rmd")
lines <- c(
"---",
"title: 'Report'",
"output_format: html_document",
"---",
"This statement is supported by @Nitta2021",
"[@Foo1983; @Blah2001; but see @Smith2020]."
)
write(lines, tempfile)
extract_citations(tempfile)
file.remove(tempfile)
document()
load_all()
tempfile <- tempfile(fileext = ".Rmd")
lines <- c(
"---",
"title: 'Report'",
"output_format: html_document",
"---",
"This statement is supported by @Nitta2021",
"[@Foo1983; @Blah2001; but see @Smith2020]."
)
write(lines, tempfile)
extract_citations(tempfile)
file.remove(tempfile)
?extract_citations
check()
document()
load_all
load_all()
document()
roxyglobals::use_roxyglobals()
document()
load_all()
check()
use_package("purrr")
use_package("yaml")
use_package("dplyr")
use_package("glue")
document()
?filter_refs_yaml
check()
use_readme_rmd()
build_readme()
load_all()
document()
check()
use_package("assertthat")
use_package("RefManageR")
use_package("bibtex")
if (requireNamespace("bibtex"))
file.name <- system.file("Bib", "RJC.bib", package="RefManageR")
bib <- ReadBib(file.name)
}
if (requireNamespace("bibtex")) {
file.name <- system.file("Bib", "RJC.bib", package="RefManageR")
bib <- ReadBib(file.name)
}
if (requireNamespace("bibtex")) {
file.name <- system.file("Bib", "RJC.bib", package="RefManageR")
bib <- RefManageR::ReadBib(file.name)
}
bib
file.name <- system.file("Bib", "biblatexExamples.bib", package="RefManageR")
bib <- RefManageR::ReadBib(file.name)
bib
file.name <- system.file("Bib", "test.bib", package="RefManageR")
bib <- RefManageR::ReadBib(file.name)
bib
names(bib)
file.name <- system.file("Bib", "RJC.bib", package="RefManageR")
bib <- RefManageR::ReadBib(file.name)
head(names(bib))
cite(c("tekwe2013application", "sarkar2013adaptive"))
cite(c("tekwe2013application", "sarkar2013adaptive"))
cite <- function(key, cite_type = c("t", "p"), bib, default_bib = Sys.getenv("BIB_NAME", unset = "bib")) {
# Use 'bib' in global env if available
if (default_bib %in% ls(envir = .GlobalEnv) & missing(bib)) {
bib <- get(default_bib, envir = .GlobalEnv)
}
# Check input
assertthat::assert_that(!is.null(bib), msg = "Must provide 'bib'")
assertthat::assert_that(
inherits(bib, "BibEntry"),
msg = "'bib' must be of class 'BibEntry'"
)
assertthat::assert_that(is.character(key))
assertthat::assert_that(assertthat::is.string(cite_type))
# Check keys
key <- stringr::str_remove_all(key, "@")
bad_keys <- setdiff(key, names(bib))
assertthat::assert_that(
length(bad_keys) == 0,
msg =  glue::glue("Following key(s) missing from bib: {paste0(bad_keys, collapse = ', ')}")
)
# Cite
switch(
cite_type,
"t" = return(RefManageR::Citet(bib[key])),
"p" = return(RefManageR::Citep(bib[key])),
"'cite_type' must be 't' or 'p'"
)
}
cite(c("tekwe2013application", "sarkar2013adaptive"))
cite(c("tekwe2013application", "sarkar2013adaptive"), "t")
Sys.setenv("BIB_NAME" = "my_bib")
cite(c("tekwe2013application", "sarkar2013adaptive"), "t")
my_bib <- bib
rm(bib)
cite(c("tekwe2013application", "sarkar2013adaptive"), "t")
cite(c("tekwe2013application", "sarkar2013adaptive"), "t", bib = my_bib)
cite("tekwe2013application", "t", bib = my_bib)
head(names(bib))
bib <- RefManageR::ReadBib(file.name)
head(names(bib))
?use_template()
?use_roxygen_md
document()
load_all()
document()
?cite_p
cite_t("tekwe2013application")
bib <- RefManageR::ReadBib(file.name)
file.name <- system.file("Bib", "RJC.bib", package="RefManageR")
bib <- RefManageR::ReadBib(file.name)
cite_t("tekwe2013application")
cite_p("tekwe2013application")
check()
load_all()
document()
check()
document()
check()
load_all()
document()
check()
?requireNamespace
# Load a bibliography
file.name <- system.file("Bib", "RJC.bib", package="RefManageR")
bib <- RefManageR::ReadBib(file.name)
tempfile <- tempfile(fileext = ".Rmd")
lines <- c(
"---",
"title: 'Report'",
"output_format: html_document",
"---",
"This statement is supported by @tekwe2013application,
"[@sarkar2013adaptive]."
)
write(lines, tempfile)
extract_citations(tempfile)
# Write out an example Rmd file
tempfile <- tempfile(fileext = ".Rmd")
lines <- c(
"---",
"title: 'Report'",
"output_format: html_document",
"---",
"This statement is supported by @tekwe2013application",
"[@sarkar2013adaptive]."
)
write(lines, tempfile)
extract_citations(tempfile)
file.remove(tempfile)
filter_refs_bib(
rmd_file = rmd_tempfile,
bib_in = system.file("Bib", "RJC.bib", package="RefManageR"),
bib_out = bib_tempfile
)
load_all()
# Write out an example Rmd file
rmd_tempfile <- tempfile(fileext = ".Rmd")
lines <- c(
"---",
"title: 'Report'",
"output_format: html_document",
"---",
"This statement is supported by @tekwe2013application",
"[@sarkar2013adaptive]."
)
write(lines, tempfile)
extract_citations(tempfile)
# Filter the bibliography
bib_tempfile <- tempfile(fileext = ".bib")
filter_refs_bib(
rmd_file = rmd_tempfile,
bib_in = system.file("Bib", "RJC.bib", package="RefManageR"),
bib_out = bib_tempfile
)
# Cleanup
file.remove(rmd_tempfile)
file.remove(bib_tempfile)
# Write out an example Rmd file
rmd_tempfile <- tempfile(fileext = ".Rmd")
lines <- c(
"---",
"title: 'Report'",
"output_format: html_document",
"---",
"This statement is supported by @tekwe2013application",
"[@sarkar2013adaptive]."
)
write(lines, tempfile)
extract_citations(tempfile)
bib_tempfile <- tempfile(fileext = ".bib")
filter_refs_bib(
rmd_file = rmd_tempfile,
bib_in = system.file("Bib", "RJC.bib", package="RefManageR"),
bib_out = bib_tempfile
)
system.file("Bib", "RJC.bib", package="RefManageR")
?RefManageR::WriteBib
filter_refs_bib(
rmd_file = rmd_tempfile,
bib_in = system.file("Bib", "RJC.bib", package="RefManageR"),
bib_out = "test.bib"
)
rmd_tempfile
rmd_file = fs::path_abs(rmd_tempfile)
rmd_file
filter_refs_bib(
rmd_file = fs::path_abs(rmd_tempfile),
bib_in = system.file("Bib", "RJC.bib", package="RefManageR"),
bib_out = "test.bib"
)
lines
write(lines, "lines.Rmd")
rmd_tempfile <- tempfile(fileext = ".Rmd")
lines <- c(
"---",
"title: 'Report'",
"output_format: html_document",
"---",
"This statement is supported by @tekwe2013application",
"[@sarkar2013adaptive]."
)
write(lines, rmd_tempfile)
bib_tempfile <- tempfile(fileext = ".bib")
filter_refs_bib(
rmd_file = rmd_tempfile,
bib_in = system.file("Bib", "RJC.bib", package="RefManageR"),
bib_out = bib_tempfile
)
readLines(bib_tempfile)
file.remove(rmd_tempfile)
file.remove(bib_tempfile)
document()
load_all()
check()
load_all()
document()
?filter_refs_bib
document()
load_all()
check()
document()
load_all()
check()
build_readme()
build_readme()
text <- '.footnote[`r cite_t("@Schneider2006a")`]'
text %>%
magrittr::extract(., stringr::str_detect(., "@"))
text %>%
magrittr::extract(., stringr::str_detect(., "@")) %>%
stringr::str_remove_all("^[^@]*") %>%
stringr::str_remove_all('\\[|\\]|\\)|\\(|\\.$|,|\\{|\\}|\\\\|\\"')
text %>%
magrittr::extract(., stringr::str_detect(., "@")) %>%
stringr::str_remove_all("^[^@]*") %>%
stringr::str_remove_all('\\[|\\]|\\)|\\(|\\.$|,|\\{|\\}|\\\\|\\|`"')
text %>%
magrittr::extract(., stringr::str_detect(., "@")) %>%
stringr::str_remove_all("^[^@]*") %>%
stringr::str_remove_all('\\[|\\]|\\)|\\(|\\.$|,|\\{|\\}|\\\\|\\"|`')
text %>%
magrittr::extract(., stringr::str_detect(., "@")) %>%
stringr::str_remove_all("^[^@]*") %>%
stringr::str_remove_all('\\[|\\]|\\)|\\(|\\.$|,|\\{|\\}|\\\\|\\"|`') %>%
magrittr::extract(., stringr::str_detect(., "^@|^-@")) %>%
stringr::str_remove_all("^@|^-@") %>%
unique %>%
sort %>%
tibble::tibble(key = .)
load_all()
check()
load_all()
check()
